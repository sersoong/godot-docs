.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the NetworkedMultiplayerPeer.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_NetworkedMultiplayerPeer:

NetworkedMultiplayerPeer
========================

**Inherits:** :ref:`PacketPeer<class_packetpeer>` **<** :ref:`Reference<class_reference>` **<** :ref:`Object<class_object>`

**Inherited By:** :ref:`NetworkedMultiplayerENet<class_networkedmultiplayerenet>`

**Category:** Core

Brief Description
-----------------



Member Functions
----------------

+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`    | :ref:`get_connection_status<class_NetworkedMultiplayerPeer_get_connection_status>` **(** **)** const                                    |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`    | :ref:`get_packet_peer<class_NetworkedMultiplayerPeer_get_packet_peer>` **(** **)** const                                                |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`    | :ref:`get_unique_id<class_NetworkedMultiplayerPeer_get_unique_id>` **(** **)** const                                                    |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`  | :ref:`is_refusing_new_connections<class_NetworkedMultiplayerPeer_is_refusing_new_connections>` **(** **)** const                        |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| void                     | :ref:`poll<class_NetworkedMultiplayerPeer_poll>` **(** **)**                                                                            |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| void                     | :ref:`set_refuse_new_connections<class_NetworkedMultiplayerPeer_set_refuse_new_connections>` **(** :ref:`bool<class_bool>` enable **)** |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| void                     | :ref:`set_target_peer<class_NetworkedMultiplayerPeer_set_target_peer>` **(** :ref:`int<class_int>` id **)**                             |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| void                     | :ref:`set_transfer_mode<class_NetworkedMultiplayerPeer_set_transfer_mode>` **(** :ref:`int<class_int>` mode **)**                       |
+--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+

Signals
-------

.. _class_NetworkedMultiplayerPeer_connection_failed:

- **connection_failed** **(** **)**

Emitted when failed to connect to server.

.. _class_NetworkedMultiplayerPeer_connection_succeeded:

- **connection_succeeded** **(** **)**

Emitted when successfully connected to server.

.. _class_NetworkedMultiplayerPeer_peer_connected:

- **peer_connected** **(** :ref:`int<class_int>` id **)**

Emitted by the server when a client is connected.

.. _class_NetworkedMultiplayerPeer_peer_disconnected:

- **peer_disconnected** **(** :ref:`int<class_int>` id **)**

Emitted by the server when a client is disconnected.

.. _class_NetworkedMultiplayerPeer_server_disconnected:

- **server_disconnected** **(** **)**

Emitted by clients when server is disconnected.


Numeric Constants
-----------------

- **TRANSFER_MODE_UNRELIABLE** = **0**
- **TRANSFER_MODE_UNRELIABLE_ORDERED** = **1**
- **TRANSFER_MODE_RELIABLE** = **2**
- **CONNECTION_DISCONNECTED** = **0**
- **CONNECTION_CONNECTING** = **1**
- **CONNECTION_CONNECTED** = **2**
- **TARGET_PEER_BROADCAST** = **0**
- **TARGET_PEER_SERVER** = **1**

Member Function Description
---------------------------

.. _class_NetworkedMultiplayerPeer_get_connection_status:

- :ref:`int<class_int>` **get_connection_status** **(** **)** const

.. _class_NetworkedMultiplayerPeer_get_packet_peer:

- :ref:`int<class_int>` **get_packet_peer** **(** **)** const

.. _class_NetworkedMultiplayerPeer_get_unique_id:

- :ref:`int<class_int>` **get_unique_id** **(** **)** const

.. _class_NetworkedMultiplayerPeer_is_refusing_new_connections:

- :ref:`bool<class_bool>` **is_refusing_new_connections** **(** **)** const

Return whether this ``NetworkedMultiplayerPeer`` is refusing new connections.

.. _class_NetworkedMultiplayerPeer_poll:

- void **poll** **(** **)**

.. _class_NetworkedMultiplayerPeer_set_refuse_new_connections:

- void **set_refuse_new_connections** **(** :ref:`bool<class_bool>` enable **)**

If ``endable`` is true, this ``NetworkedMultiplayerPeer`` will refuse new connections.

.. _class_NetworkedMultiplayerPeer_set_target_peer:

- void **set_target_peer** **(** :ref:`int<class_int>` id **)**

.. _class_NetworkedMultiplayerPeer_set_transfer_mode:

- void **set_transfer_mode** **(** :ref:`int<class_int>` mode **)**


